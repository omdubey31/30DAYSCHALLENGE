Problem = 297. Serialize and Deserialize Binary Tree

class Codec:
    
    MARKER = "M"
    
    def serialize_rec(self, node, stream):
        if node is None:
            stream.append(self.MARKER)
            return

        stream.append(str(node.val))

        self.serialize_rec(node.left, stream)
        self.serialize_rec(node.right, stream)

    def serialize(self, root):
        stream = []
        self.serialize_rec(root, stream)
        return ','.join(stream)

    def deserialize_helper(self, values):
        val = values.pop(0)

        if val == self.MARKER:
            return None

        node = TreeNode(int(val))

        node.left = self.deserialize_helper(values)
        node.right = self.deserialize_helper(values)

        return node

    def deserialize(self, data):
        values = data.split(',')  # Split the data back into a list
        return self.deserialize_helper(values)


# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))


    
